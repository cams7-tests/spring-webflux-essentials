package br.cams7.tests.springwebfluxessentials.exception;

import static org.springframework.http.MediaType.APPLICATION_JSON;

import java.util.Optional;
import org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler;
import org.springframework.boot.web.error.ErrorAttributeOptions;
import org.springframework.boot.web.error.ErrorAttributeOptions.Include;
import org.springframework.boot.web.reactive.error.ErrorAttributes;
import org.springframework.context.ApplicationContext;
import org.springframework.core.annotation.Order;
import org.springframework.http.codec.ServerCodecConfigurer;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.server.RequestPredicates;
import org.springframework.web.reactive.function.server.RouterFunction;
import org.springframework.web.reactive.function.server.RouterFunctions;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;
import reactor.core.publisher.Mono;

@Component
@Order(-2)
public class GlobalExceptionHandler extends AbstractErrorWebExceptionHandler {

  public GlobalExceptionHandler(
      ErrorAttributes errorAttributes,
      org.springframework.boot.autoconfigure.web.WebProperties.Resources resources,
      ApplicationContext applicationContext,
      ServerCodecConfigurer codecConfigurer) {
    super(errorAttributes, resources, applicationContext);
    setMessageWriters(codecConfigurer.getWriters());
  }

  @Override
  protected RouterFunction<ServerResponse> getRoutingFunction(ErrorAttributes errorAttributes) {
    return RouterFunctions.route(RequestPredicates.all(), this::formatErrorResponse);
  }

  private Mono<ServerResponse> formatErrorResponse(ServerRequest request) {
    var query = request.uri().getQuery();
    var errorAttributesOptions =
        isTraceEnabled(query)
            ? ErrorAttributeOptions.of(Include.STACK_TRACE)
            : ErrorAttributeOptions.defaults();
    var errorAttributes = getErrorAttributes(request, errorAttributesOptions);
    var status = (int) Optional.ofNullable(errorAttributes.get("status")).orElse(500);
    var body = BodyInserters.fromValue(errorAttributes);
    var response = ServerResponse.status(status).contentType(APPLICATION_JSON).body(body);
    return response;
  }

  private static boolean isTraceEnabled(String query) {
    return !ObjectUtils.isEmpty(query) && query.contains(query);
  }
}
